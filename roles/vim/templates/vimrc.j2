set viminfo=

" basic setting
let mapleader = ","	
set scrolloff=5
set nobackup
set showmode
set noswapfile

" enable mouse
set mouse=a
set guioptions+=a
set ttymouse=xterm2

"-------------------------------------------------------------------------------
" Status Line
"-------------------------------------------------------------------------------
set laststatus=2
set ruler

" display charset and CR/LF setting
if winwidth(0) >= 120
    set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %F%=[%{GetB()}]\ %l,%c%V%8P
else
    set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %f%=[%{GetB()}]\ %l,%c%V%8P
endif

augroup InsertHook
autocmd!
autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90
augroup END

function! GetB()
    let c = matchstr(getline('.'), '.', col('.') - 1)
    let c = iconv(c, &enc, &fenc)
    return String2Hex(c)
endfunction

" help eval-examples
" The function Nr2Hex() returns the Hex string of a number.
func! Nr2Hex(nr)
    let n = a:nr
    let r = ""
    while n
        let r = '0123456789ABCDEF'[n % 16] . r
        let n = n / 16
    endwhile
    return r
endfunc
" The function String2Hex() converts each character in a string to a two
" character Hex string.
func! String2Hex(str)
    let out = ''
    let ix = 0
    while ix < strlen(a:str)
        let out = out . Nr2Hex(char2nr(a:str[ix]))
        let ix = ix + 1
    endwhile
    return out
endfunc

"-------------------------------------------------------------------------------
" Appearance 
"-------------------------------------------------------------------------------
set showmatch
"set list
"set listchars=tab:>.,trail:_,extends:>,precedes:<

:set lazyredraw
:set ttyfast


"-------------------------------------------------------------------------------
" Indent
"-------------------------------------------------------------------------------
set autoindent smartindent cindent
set tabstop=4 shiftwidth=4 softtabstop=0
set expandtab
if has("autocmd")
    "ファイルタイプの検索を有効にする
    filetype plugin on
    "そのファイルタイプにあわせたインデントを利用する
    filetype indent on
    " これらのftではインデントを無効に
    "autocmd FileType php filetype indent off

    autocmd FileType yml :set tabstop=2 shiftwidth=2 softtabstop=0
    autocmd FileType html :set tabstop=2 shiftwidth=2 softtabstop=0
    autocmd FileType xhtml :set tabstop=2 shiftwidth=2 softtabstop=0
    autocmd Filetype python :set tabstop=4 shiftwidth=4 softtabstop=0
endif

"-------------------------------------------------------------------------------
" search
"-------------------------------------------------------------------------------
set wrapscan
set ignorecase
set incsearch
set hlsearch

"-------------------------------------------------------------------------------
" search
"-------------------------------------------------------------------------------

syntax on

set cursorline

" underline for current window only
augroup cch
    autocmd! cch
    autocmd WinLeave * set nocursorline
    autocmd WinEnter,BufRead * set cursorline
augroup END

:hi clear CursorLine
:hi CursoriLine gui=underline
highlight CursorLine ctermbg=black guibg=black

" search highlight cancel
nmap <ESC><ESC> ;nohlsearch<CR><ESC>

set encoding=utf-8
set fileencodings=utf-8,ucs-bom,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,euc-jp,sjis,cp932

" <TAB>: completion.                                         
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"   
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>" 

" 検索結果をハイライト
set hlsearch

set number
syntax on

"------------------------------------------------------------------------------
"NeoBundle
"------------------------------------------------------------------------------
set nocompatible               " Be iMproved
filetype off                   " Required!

if has('vim_starting')
      set runtimepath+=~/.vim/bundle/neobundle.vim/
  endif

  call neobundle#begin(expand('~/.vim/bundle/'))

  filetype plugin indent on     " Required!

" Installation check.
 if neobundle#exists_not_installed_bundles()
 echomsg 'Not installed bundles : ' .
\ string(neobundle#get_not_installed_bundle_names())
echomsg 'Please execute ":NeoBundleInstall" command.'
"finish
endif

NeoBundle 'tpope/vim-fugitive'

" set: dictionary= で辞書ファイルを指定
" autocmd BufRead *.php\|*.ctp\|*.tpl 

NeoBundle 'Shougo/neocomplcache'

let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_smart_case = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_manual_completion_start_length = 0
let g:neocomplcache_caching_percent_in_statusline = 1
let g:neocomplcache_enable_skip_completion = 1
let g:neocomplcache_skip_input_time = '0.5'
let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default':    '',
  \ 'javascript': '~/.vim/.vim/dict/javascript.dict',
  \ 'php':        '~/.vim/.vim/dict/php.dict',
  \ }
call neobundle#end()
